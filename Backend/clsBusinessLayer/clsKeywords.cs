 using System; using System.Data; using MovieRecommendations_DataLayer;  namespace MovieRecommendations_BusinessLayer {     public class clsKeywords     {         #nullable enable          public enum enMode { AddNew = 0, Update = 1 };         public enMode Mode = enMode.AddNew;          public int? KeywordID { get; set; }         public string Keyword { get; set; }         public int MovieID { get; set; }         public clsMovies_Details? Movies_DetailsInfo { get; set; }           public clsKeywords()         {             this.KeywordID = null;             this.KeywordID = null;             this.Keyword = "";             this.MovieID = 0;             Mode = enMode.AddNew;         }           private clsKeywords( int? KeywordID,string Keyword, int MovieID          )         {             this.KeywordID = KeywordID;             this.Keyword = Keyword;             this.MovieID = MovieID;             this.Movies_DetailsInfo = clsMovies_Details.FindByID(MovieID);             Mode = enMode.Update;         }          private bool _AddNewKeywords()        {         this.KeywordID = clsKeywordsData.AddNewKeywords( this.Keyword, this.MovieID);              return (this.KeywordID != null);         }          public static bool AddNewKeywords( ref int? KeywordID,string Keyword, int MovieID)         {         KeywordID = clsKeywordsData.AddNewKeywords( Keyword, MovieID);              return (KeywordID != null);         }          private bool _UpdateKeywords()        {         return clsKeywordsData.UpdateKeywordsByID( this.KeywordID, this.Keyword, this.MovieID       );        }          public static bool UpdateKeywordsByID( int? KeywordID,string Keyword, int MovieID          )         {         return clsKeywordsData.UpdateKeywordsByID( KeywordID, Keyword, MovieID);          }          public static clsKeywords? FindByKeywordID(int? KeywordID)          {             if (KeywordID == null)             {                 return null;             }             string Keyword = "";             int MovieID = 0;             bool IsFound = clsKeywordsData.GetKeywordsInfoByID(KeywordID,  ref Keyword,  ref MovieID);             if(IsFound)                return new clsKeywords(  KeywordID,  Keyword,  MovieID);             else                 return  null;         }          public static DataTable? GetAllKeywords()        {          return clsKeywordsData.GetAllKeywords();         }            public bool Save()         {             switch (Mode)             {                 case enMode.AddNew:                     if(_AddNewKeywords())                     {                         Mode = enMode.Update;                          return true;                     }                     else                     {                         return false;                     }                 case enMode.Update:                     return _UpdateKeywords();              }                      return false;         }           public static bool DeleteKeywords(int KeywordID)        {          return clsKeywordsData.DeleteKeywords(KeywordID);         }           public enum enKeywordsColumns          {             KeywordID,             Keyword,             MovieID          }           public static DataTable? SearchData(enKeywordsColumns enChose, string Data)         {             if(!SqlHelper.IsSafeInput(Data))                 return null;                          return clsKeywordsData.SearchData(enChose.ToString(), Data);          }                } } 